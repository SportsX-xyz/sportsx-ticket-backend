FROM node:20-alpine AS deps
WORKDIR /app
ENV PNPM_HOME=/root/.local/share/pnpm
ENV PATH=$PNPM_HOME:$PATH
RUN corepack enable
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

FROM deps AS build
WORKDIR /app
COPY prisma ./prisma
RUN pnpm prisma:generate
COPY . .
RUN mkdir -p .config/solana
RUN pnpm run build

FROM node:20-alpine AS run
WORKDIR /app
ENV NODE_ENV=production
ENV PNPM_HOME=/root/.local/share/pnpm
ENV PATH=$PNPM_HOME:$PATH
# install netcat-openbsd for healthcheck and startup probe
RUN apk add --no-cache netcat-openbsd curl && corepack enable && pnpm add -g pm2
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/dist ./dist
COPY --from=build /app/prisma ./prisma
COPY --from=build /app/package.json ./package.json
COPY --from=build /app/.config ./config
COPY --from=build /app/Anchor.toml ./Anchor.toml
COPY --from=build /app/target ./target
EXPOSE 4000

# 创建新的entrypoint脚本，跳过PostgreSQL等待
RUN echo '#!/usr/bin/env sh\n\
set -e\n\
\n\
echo "Using remote database, skipping postgres wait"\n\
\n\
pnpm prisma:generate\n\
# use prisma migrate deploy database\n\
npx prisma migrate deploy\n\
\n\
if [ "${USE_PM2:-false}" = "true" ]; then\n\
  pm2 startOrReload deploy/pm2/dev.json\n\
  exec pm2 logs --raw\n\
else\n\
  exec node dist/src/main.js\n\
fi' > /entrypoint-remote.sh && chmod +x /entrypoint-remote.sh

CMD ["/entrypoint-remote.sh"]
